local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- ตัวแปรควบคุมสถานะการเทเลพอร์ต
local is_teleporting = false
local last_teleport_attempt = 0
local teleport_cooldown = 20 -- เพิ่มเป็น 20 วินาทีเพื่อลดโอกาสเกมปิด
local loop_delay = 5 -- ดีเลย์ 5 วินาทีในลูป server_hop

-- ฟังก์ชัน server_hop สำหรับย้ายไปเซิร์ฟเวอร์ที่มีผู้เล่นน้อยที่สุด
local function server_hop()
    if is_teleporting or tick() - last_teleport_attempt < teleport_cooldown then
        warn("Teleport on cooldown or in progress. Time left: " .. math.ceil(teleport_cooldown - (tick() - last_teleport_attempt)) .. " seconds")
        return false
    end

    -- ตรวจสอบว่าผู้เล่นยังอยู่ในเกม
    local player = Players.LocalPlayer
    if not player or not player.Parent then
        warn("Player not in game. Aborting server hop.")
        return false
    end

    is_teleporting = true

    while true do
        print("Attempting server hop...")

        -- ตรวจสอบสถานะเกมก่อนเรียก API
        if not RunService:IsRunning() then
            warn("Game is not running. Aborting server hop.")
            is_teleporting = false
            last_teleport_attempt = tick()
            return false
        end

        local success, result = pcall(function()
            return HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. game.PlaceId .. '/servers/Public?sortOrder=Asc&limit=100'))
        end)

        if not success or not result.data then
            warn("Failed to fetch servers: " .. tostring(result))
            task.wait(loop_delay)
            continue
        end

        local min_players = math.huge
        local selected_server = nil

        for _, v in pairs(result.data) do
            if type(v) == "table" and v.maxPlayers > v.playing and v.id ~= game.JobId then
                if v.playing < min_players then
                    min_players = v.playing
                    selected_server = v.id
                end
            end
        end

        if selected_server then
            local teleport_success, teleport_error = pcall(function()
                print("Attempting to teleport to server: " .. selected_server .. " with " .. min_players .. " players")
                TeleportService:TeleportToPlaceInstance(game.PlaceId, selected_server)
            end)
            if teleport_success then
                print("Teleport initiated successfully")
                is_teleporting = false
                last_teleport_attempt = tick()
                return true
            else
                warn("Teleport failed: " .. tostring(teleport_error))
            end
        else
            warn("No suitable servers found.")
        end

        task.wait(loop_delay) -- หน่วงเวลา 5 วินาทีในลูป
    end
end

-- ตรวจสอบการเคลื่อนไหวของผู้เล่น
local function check_movement()
    local player = Players.LocalPlayer
    if not player then
        warn("LocalPlayer not found.")
        return
    end

    local character = player.Character
    local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        warn("HumanoidRootPart not found.")
        return
    end

    local last_position = humanoidRootPart.Position
    local idle_time = 0
    local check_interval = 1 -- ตรวจสอบทุก 1 วินาที
    local idle_threshold = 20 -- อยู่นิ่ง 20 วินาที
    local movement_threshold = 0.1 -- ระยะทางขั้นต่ำที่ถือว่าเคลื่อนไหว

    while true do
        task.wait(check_interval)

        -- ตรวจสอบว่า character และ HumanoidRootPart ยังมีอยู่
        character = player.Character
        humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
        if not humanoidRootPart then
            warn("HumanoidRootPart not found. Stopping movement check.")
            break
        end

        -- เปรียบเทียบตำแหน่ง
        local current_position = humanoidRootPart.Position
        local distance_moved = (current_position - last_position).Magnitude

        if distance_moved < movement_threshold then
            idle_time = idle_time + check_interval
            if idle_time >= idle_threshold then
                print("Player idle for " .. idle_time .. " seconds. Attempting server hop.")
                local success = server_hop()
                if not success then
                    idle_time = 0 -- รีเซ็ตเวลา idle เพื่อลองใหม่ในรอบถัดไป
                end
            end
        else
            idle_time = 0 -- รีเซ็ตเวลา idle เมื่อเคลื่อนไหว
        end

        last_position = current_position
    end
end

-- จัดการเมื่อตัวละครโหลดใหม่
Players.LocalPlayer.CharacterAdded:Connect(function()
    task.wait(1) -- รอให้ตัวละครโหลดสมบูรณ์
    task.spawn(check_movement)
end)

-- เริ่มการตรวจสอบหากตัวละครมีอยู่แล้ว
if Players.LocalPlayer.Character then
    task.spawn(check_movement)
end
