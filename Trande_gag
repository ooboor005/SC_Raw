local BaseUrl = "http://mw0owowg4080kkgow08848o4.203.159.93.70.sslip.io"
if not game:IsLoaded() then
	game.Loaded:Wait()
end

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
while not Players.LocalPlayer do
	task.wait()
end
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GameEvents = ReplicatedStorage:WaitForChild("GameEvents")
local VIM = game:GetService("VirtualInputManager")
local GuiService = game:GetService("GuiService")
local Workspace = game:GetService("Workspace")
local IsScriptLoaded = false
local IsFruitTrader = false

-- ======== Helpers: normalize & partial-match for pet filters ========
local function _normalizeName(s: string?): string
	if typeof(s) ~= "string" then return "" end
	s = s:lower():gsub("%s+", " ")
	return s:match("^%s*(.-)%s*$") or s
end

-- returns true if petName contains any of filters (as a full phrase)
-- If filters is nil or empty -> allow all
local function matchesAnyPetFilter(petName: string, filters: {string}?): boolean
	if filters == nil or #filters == 0 then
		return true
	end
	local hay = " " .. _normalizeName(petName) .. " "
	for _, f in ipairs(filters) do
		local needle = " " .. _normalizeName(f) .. " "
		if needle ~= "  " and hay:find(needle, 1, true) then
			return true
		end
	end
	return false
end
-- ===================================================================

local function loadWait()
	while not LocalPlayer:GetAttribute("Finished_Loading") do
		task.wait()
	end
	while not LocalPlayer:GetAttribute("DataFullyLoaded") do
		task.wait()
	end
	while not LocalPlayer:GetAttribute("Setup_Finished") do
		task.wait()
	end
	GameEvents.Finish_Loading:FireServer()
	GameEvents.LoadScreenEvent:FireServer(LocalPlayer)
	while not LocalPlayer:GetAttribute("Loading_Screen_Finished") do
		task.wait()
	end
	task.wait(1)
end
print("LOADED")

if LocalPlayer:GetAttribute("Loading_Screen_Finished") then
	GameEvents.Finish_Loading:FireServer()
	GameEvents.LoadScreenEvent:FireServer(LocalPlayer)
else
	loadWait()
end

-- üîÅ ‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° Enter
task.wait(1)
VIM:SendKeyEvent(true, 13, false, game)
task.wait()
VIM:SendKeyEvent(false, 13, false, game)

function Script()
	-- Script HERE
	print("-- Script HERE")
	task.wait(30)
  	loadstring(game:HttpGet('https://github.com/ooboor005/SC_Raw/raw/refs/heads/main/SC_Gag'))()
end

function ScriptLoad()
	if IsScriptLoaded then
		return
	end
	if not IsScriptLoaded then
		IsScriptLoaded = true
	end
	local ConfigRequest = request({
		Url = string.format("%s/config/%s", BaseUrl, Players.LocalPlayer.Name),
		Method = "GET",
	})
	local Config: {
		taskId: string,
		tarder: string,
		accpeter: string | nil,
		data: {
			type: "FRUIT" | "PET" | "ALL",
			pets: { string } | nil,
			limit: number | nil,
		},
	} = HttpService:JSONDecode(ConfigRequest.Body)

	if typeof(Config["_errors"]) == "table" then
		Script()
	else
		if Config.data.type ~= "FRUIT" then
			Script()
		end
	end
end

function Trading()
	local LocalPlayer = Players.LocalPlayer
	local Character = Players.LocalPlayer.Character
	local Humanoid: Humanoid = Character.Humanoid
	local IsTradeDone = false

	Players.LocalPlayer.ChildAdded:Connect(function(char)
		Character = char
		Humanoid = char.Humanoid
	end)

	local NotificationFrame: Frame = Players.LocalPlayer.PlayerGui:FindFirstChild("Top_Notification").Frame
	NotificationFrame.ChildAdded:Connect(function(frame)
		if frame:FindFirstChild("TextLabel") then
			if frame.TextLabel.Text == "Trade completed!" then
				IsTradeDone = true
			end
		end
	end)

	local ConfigRequest = request({
		Url = string.format("%s/config/%s", BaseUrl, Players.LocalPlayer.Name),
		Method = "GET",
	})
	local Config: {
		taskId: string,
		tarder: string,
		accpeter: string | nil,
		data: {
			type: "FRUIT" | "PET" | "ALL",
			limit: number | nil,
			pets: { string } | nil,
		},
	} = HttpService:JSONDecode(ConfigRequest.Body)

	if typeof(Config["_errors"]) == "table" then
		repeat
			task.wait(10)
			ConfigRequest = request({
				Url = string.format("%s/config/%s", BaseUrl, Players.LocalPlayer.Name),
				Method = "GET",
			})
			Config = HttpService:JSONDecode(ConfigRequest.Body)
		until typeof(Config["_errors"]) ~= "table"
	end

	local Mode: "ACCPET" | "TRADER" = "TRADER"
	if Config.accpeter == Players.LocalPlayer.Name then
		Mode = "ACCPET"
	end

	local TargetPlayer: Player = Players:FindFirstChild(
		Mode == "ACCPET" and Config.tarder
			or typeof(Config.accpeter) == "nil" and Config.tarder
			or string.len(Config.accpeter or "") == 0 and Config.tarder
			or Config.accpeter
	)

	print("Find a player")

	repeat
		task.wait(5)
		ConfigRequest = request({
			Url = string.format("%s/config/%s", BaseUrl, Players.LocalPlayer.Name),
			Method = "GET",
		})
		Config = HttpService:JSONDecode(ConfigRequest.Body)
		TargetPlayer = Players:FindFirstChild(
			Mode == "ACCPET" and Config.tarder
				or typeof(Config.accpeter) == "nil" and Config.tarder
				or string.len(Config.accpeter or "") == 0 and Config.tarder
				or Config.accpeter
		)
	until TargetPlayer or typeof(Config["_errors"]) == "table"

	if typeof(Config["_errors"]) == "table" then
		return
	end

	local PlayersList = {}
	local PlayerIndex = 1
	local LimitTrade = typeof(Config.data.limit) == "number" and Config.data.limit or 0
	local Limit = 1

	for i, v in pairs(Players:GetPlayers()) do
		if v ~= LocalPlayer then
			table.insert(PlayersList, v)
		end
	end

	local C2 = Players.PlayerAdded:Connect(function(plr)
		table.insert(PlayersList, plr)
	end)
	local C1 = Players.PlayerRemoving:Connect(function(plr)
		if table.find(PlayersList, plr) then
			table.remove(PlayersList, plr)
		end
	end)

	if Mode == "TRADER" then
		if Config.data.type == "ALL" or Config.data.type == "PET" then
			Limit = 0

			for i, v in pairs(Workspace:FindFirstChild("PetsPhysical"):GetChildren()) do
				if v:GetAttribute("OWNER") == LocalPlayer.Name then
					GameEvents.PetsService:FireServer("UnequipPet", v:GetAttribute("UUID"))
				end
				task.wait(1)
			end

			if Character:FindFirstChildOfClass("Tool") then
				Humanoid:UnequipTools()
			end

			for i, v in pairs(Players.LocalPlayer.Backpack:GetChildren()) do
				if
					typeof(v) == "Instance"
					and v:IsA("Tool")
					and v:GetAttribute("ItemType") == "Pet"
					and (LimitTrade == 0 or Limit <= LimitTrade)
				then
					-- ‡∏£‡∏≠‡πÉ‡∏´‡πâ TargetPlayer ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡πÄ‡∏Å‡∏° (‡∏ï‡∏≤‡∏° config ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
					repeat
						task.wait()
						TargetPlayer = Players:FindFirstChild(
							typeof(Config.accpeter) == "nil" and Config.tarder
								or string.len(Config.accpeter or "") == 0 and Config.tarder
								or Config.accpeter
						)
					until TargetPlayer

					-- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å accpeter ‡πÉ‡∏´‡πâ‡∏ß‡∏ô‡∏ï‡∏≤‡∏° PlayersList
					if Config.accpeter == nil or string.len(Config.accpeter) == 0 then
						if PlayersList[PlayerIndex] == nil then
							PlayerIndex = 1
						end
						TargetPlayer = PlayersList[PlayerIndex]
					end
					local TargetName = TargetPlayer and TargetPlayer.Name or nil

					-- ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå (‡∏Å‡∏±‡∏ô‡πÄ‡∏Ñ‡∏™‡πÑ‡∏°‡πà‡∏°‡∏µ [..] ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢)
					local PetName = v.Name:match("^(.-)%s%[.+%]$") or v.Name

					-- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Char ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
					local TargetChar = TargetPlayer and TargetPlayer.Character or nil

					if TargetChar and matchesAnyPetFilter(PetName, Config.data and Config.data.pets) then
						repeat
							task.wait()

							if not TargetName or not Players:FindFirstChild(TargetName) then
								game:Shutdown()
							end

							-- ‡∏ß‡∏¥‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏Å‡∏•‡πâ ‡πÜ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
							LocalPlayer.Character.HumanoidRootPart.CFrame =
								TargetChar.HumanoidRootPart.CFrame * CFrame.new(2, 0, 0)

							-- ‡∏ñ‡πâ‡∏≤‡∏ï‡∏¥‡∏î favorite ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô
							if v:GetAttribute("d") == true then
								GameEvents.Favorite_Item:FireServer(v)
							end

							-- equip ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Backpack
							if LocalPlayer.Backpack:FindFirstChild(v.Name) then
								Humanoid:EquipTool(v)
							end

							-- ‡∏£‡∏≠ prompt ‡∏Ç‡∏∂‡πâ‡∏ô
							local prompt
							repeat
								task.wait()
								-- ‡∏£‡∏µ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï TargetChar ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏£‡∏µ‡∏™‡∏õ‡∏≠‡∏ß‡πå‡∏ô
								if TargetPlayer then
									TargetChar = TargetPlayer.Character
								end
								prompt = TargetChar and TargetChar.HumanoidRootPart:FindFirstChild("ProximityPrompt", true)
							until prompt or not Players:FindFirstChild(TargetName)

							if not Players:FindFirstChild(TargetName) then
								game:Shutdown()
							end

							task.wait(0.75)
							GameEvents.PetGiftingService:FireServer("GivePet", TargetPlayer)
							task.wait(0.75)
							task.wait(4)
						until IsTradeDone

						IsTradeDone = false
						repeat task.wait() until not NotificationFrame:FindFirstChild("Notification_UI")

						if not Players:FindFirstChild(TargetName) then
							game:Shutdown()
						end

						PlayerIndex += 1
						Limit += 1
					end
				end
			end
		end

		request({
			Url = string.format("%s/status/%s", BaseUrl, Config.taskId),
			Method = "POST",
			Headers = {
				["Content-Type"] = "application/json",
			},
			Body = HttpService:JSONEncode({
				["status"] = true,
			}),
		})

		if Config.data.type ~= "FRUIT" then
			ScriptLoad()
		end
	else
		-- ACCPET mode
		local IsDone = false
		local ResponeData
		task.spawn(function()
			while true do
				task.wait()
				repeat
					task.wait(30)
					ResponeData = request({
						Url = string.format("%s/status/%s", BaseUrl, Config.taskId),
						Method = "GET",
					})
					IsDone = HttpService:JSONDecode(ResponeData.Body)["done"]
				until IsDone
			end
		end)
		task.spawn(function()
			while not IsDone do
				task.wait()
				local giftGui = LocalPlayer.PlayerGui:FindFirstChild("Gift_Notification")
				if giftGui and giftGui:FindFirstChild("Frame") then
					for _, child in pairs(giftGui.Frame:GetChildren()) do
						if child:IsA("ImageLabel") then
							GuiService.SelectedObject = child.Holder.Frame.Accept
							VIM:SendKeyEvent(true, 13, false, game)
							task.wait()
							VIM:SendKeyEvent(false, 13, false, game)
							task.wait(0.5)
							GuiService.SelectedObject = nil
						end
					end
				end
			end
		end)
	end

	C1:Disconnect()
	C2:Disconnect()
end

game:GetService("Players").LocalPlayer.Idled:Connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
	task.wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)

if game.PlaceId == 126884695634066 then
	task.spawn(function()
		while true do
			task.wait()
			local ConfigRequest = request({
				Url = string.format("%s/config/%s", BaseUrl, Players.LocalPlayer.Name),
				Method = "GET",
			})
			local Config: {
				taskId: string,
				tarder: string,
				accpeter: string | nil,
				data: {
					type: "FRUIT" | "PET" | "ALL",
					pets: { string },
				},
			} = HttpService:JSONDecode(ConfigRequest.Body)

			VIM:SendKeyEvent(true, 13, false, game)
			task.wait()
			VIM:SendKeyEvent(false, 13, false, game)

			if typeof(Config["_errors"]) == "table" then
				if not IsFruitTrader then
					ScriptLoad()
				end
				repeat
					task.wait(10)
					VIM:SendKeyEvent(true, 13, false, game)
					task.wait()
					VIM:SendKeyEvent(false, 13, false, game)
					ConfigRequest = request({
						Url = string.format("%s/config/%s", BaseUrl, Players.LocalPlayer.Name),
						Method = "GET",
					})
					Config = HttpService:JSONDecode(ConfigRequest.Body)
				until typeof(Config["_errors"]) ~= "table"
			end

			if Config.data.type == "FRUIT" then
				IsFruitTrader = true
			end

			print("TRADING")
			Trading()
		end
	end)
end
