task.wait(60)
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Private_Server = game:GetService('RobloxReplicatedStorage').GetServerType:InvokeServer()

-- ตารางเก็บ server id ที่เคยลองแล้ว
local triedServers = {}

-- ฟังก์ชันหา server id ใหม่ (ที่ยังไม่เคยเข้า)
local function getAvailableServers()
	local available = {}
	
	local success, result = pcall(function()
		return HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/'..game.PlaceId..'/servers/Public?sortOrder=Asc&limit=100')).data
	end)
	
	if success and result then
		for _, v in pairs(result) do
			if type(v) == "table" and v.maxPlayers > v.playing and v.playing <= 7 and v.playing >= 3 and v.id ~= game.JobId and not triedServers[v.id] then
				table.insert(available, v.id)
			end
		end
	end
	
	return available
end

-- ฟังก์ชันลองเทเลพอร์ต
local function tryTeleport()
	local servers = getAvailableServers()
	if #servers == 0 then
		warn("No available servers left to hop.")
		return
	end
	
	local chosenServer = servers[math.random(1, #servers)]
	triedServers[chosenServer] = true
	
	warn("Attempting teleport to: ", chosenServer)
	TeleportService:TeleportToPlaceInstance(game.PlaceId, chosenServer)
end

-- ตัวจัดการ fail
TeleportService.TeleportInitFailed:Connect(function(player, teleportResult, errorMessage)
	warn("Teleport failed:", teleportResult, errorMessage)
	task.wait(2)
	tryTeleport()
end)

-- เริ่มทำงาน
task.spawn(function()
	if Private_Server ~= "StandardServer" then
		tryTeleport()
	end
end)
